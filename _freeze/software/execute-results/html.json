{
  "hash": "857ec9de69ee08b063e496e165ed2446",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Software packages\"\n---\n\n\n\n\nWorking with statistical software is the daily business of our statisticians. Most software languages allow their users to create their own packages of custom functions to reduce errors in repeated tasks. The software used by SCTO statisticians, primarily R and Stata, are no different in this respect. This page provides an overview of some.\n\n<!-- packages are listed in alphabetical order -->\n\n# SCTO funded packages\n\nThe SCTO Statistics and Methodology platform offers grants to associated statistics specifically for the development of such statistical packages, either for the development of completely new software, or the further development of existing software.\n\n## `presize` - precision based sample size estimation\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/presize) [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/presize/) [![](https://www.r-pkg.org/badges/version/presize?color=green)](https://cran.r-project.org/package=presize) [![](https://joss.theoj.org/papers/10.21105/joss.03118/status.svg)](https://doi.org/10.21105/joss.03118)\n\n`presize` is an R package for precision based sample size calculation. It provides a large number of methods for estimating the number of samples required to gain a confidence interval of a given width, or the width that might be expected with a given sample size.\n\n<details>\n\n<summary>Example</summary>\n\nAssuming that we want to estimate the confidence interval (CI) around the sensitivity of a test, but we're not sure of the sensitivity, we can estimate the CI width in a range of scenarios as follows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(presize)\n# set up a range of scenarios\nscenarios <- expand.grid(sens = seq(.5, .95, .1),\n                         prev = seq(.1, .2, .04),\n                         ntot = c(250, 350))\n# calculate the CI width at ntot individuals with prev prevalence of event\nscenario_data <- prec_sens(sens = scenarios$sens, \n                           prev = scenarios$prev, \n                           ntot = scenarios$ntot, \n                           method = \"wilson\")\n# plot the scenarios with ggplot2\nscenario_df <- as.data.frame(scenario_data)\nlibrary(ggplot2)\nggplot(scenario_df, \n       aes(x = sens, \n           y = conf.width, \n           # convert colour to factor for distinct colours rather than a continuum\n           col = as.factor(prev), \n           group = prev)) +\n  geom_line() +\n  labs(x = \"Sensitivity\", y = \"CI width\", col = \"Prevalence\") + \n  facet_wrap(vars(ntot))\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n</details>\n\nFor ease of use, `presize` also includes a shiny app for point-and-click use, which is also available on the internet.\n\n<details>\n\n<summary>Installation</summary>\n\n`presize` can be installed in R via the following methods:\n\n    # from CRAN (the stable version)\n    install.packages(\"presize\")\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"presize\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n## `redcaptools` - a package for working with REDCap data in R\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/redcaptools) [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/redcaptools/)\n\nREDCap is a popular database for clinical research, used by many of the CTUs in Switzerland. One aggravation with REDCap data exports is that the data is in one file which can contain a lot of empty cells when more complicated database designs are used. `redcaptools` has tools to automatically pull the database apart into forms for easier use. Similar to `secuTrialR`, it also labels variables, and prepares date and factor variables. The function is primarily for interacting with REDCap via the Application Programming Interface (API), allowing easy scripted exports.\n\n<details>\n<summary>Example</summary>\n\nBy supplying the API token generated by REDCap, together with the APIs URL, the `redcap_export_byform` function can be used to export all data from the database by form. Each form is returned as an element of a list.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(redcaptools)\ntoken <- \"some-long-string-provided-by-redcap\"\nurl <- \"https://link.to.redcap/api/\"\ndat <- redcap_export_byform(token, url)\n```\n:::\n\n\n\n\nThe 'normal' format can be exported via the `redcap_export_tbl` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecord_data <- redcap_export_tbl(token, url, \"record\")\nmeta <- redcap_export_tbl(token, url, \"metadata\")\n```\n:::\n\n\n\n\nThis function can also be used to export various other API endpoints (e.g. various types of metadata etc, specific forms). \n\nThe data can then be formatted by using the metadata and the `rc_prep` function\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepped <- rc_prep(dat, meta)\n```\n:::\n\n\n\n\n</details>\n\n<details>\n<summary>Installation</summary>\n\n`redcaptools` can be installed in R via the following methods:\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"redcaptools\", repos = \"https://ctu-bern.r-universe.dev/\")\n    \n    # from github\n    remotes::install_github(\"CTU-Bern/redcaptools\")\n\n</details>\n\n## `selcorr` - post-selection inference for generalized linear models\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://www.r-pkg.org/badges/version/selcorr?color=green)](https://cran.r-project.org/package=selcorr)\n\n`selcorr` calculates (unconditional) post-selection confidence intervals and p-values for the coefficients of (generalized) linear models.\n\n<details>\n\n<summary>Example</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(selcorr)\n## linear regression:\nselcorr(lm(Fertility ~ ., swiss))\n\n## logistic regression:\nswiss.lr = within(swiss, Fertility <- (Fertility > 70))\nselcorr(glm(Fertility ~ ., binomial, swiss.lr))\n```\n:::\n\n\n\n\nA parallel bootstrapping approach is also available.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(future.apply)\nplan(multisession)\nboot.repl = future_replicate(8, selcorr(lm(Fertility ~ ., swiss), boot.repl = 1000,\nquiet = TRUE)$boot.repl, simplify = FALSE)\nplan(sequential)\nselcorr(lm(Fertility ~ ., swiss), boot.repl = do.call(\"rbind\", boot.repl))\n```\n:::\n\n\n\n\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`selcorr` can be installed in R from CRAN:\n\n    # from CRAN (the stable version)\n    install.packages(\"selcorr\")\n\n</details>\n\n## `sse` - sample size estimation\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/thofab/sse) [![](https://img.shields.io/badge/R%20forge-grey.svg)](http://r-forge.r-project.org/projects/power/) [![](https://www.r-pkg.org/badges/version/sse?color=green)](https://cran.r-project.org/package=sse)\n\n`sse` is another R package for sample size calculation that has been in use at CTU Basel for many years. It's approach is very general, allowing a wide range of scenarios to be assessed rapidly. Where `presize` is rather for precision-based calculations, `sse` is rather for hypothesis testing, although it is general enough that it can be used for both frameworks.\n\n<details>\n\n<summary>Example</summary>\n\nWe want to find the sample size for comparing two means. We are unsure of the standard deviation to expect, so we assess the sample size across a range of standard deviations. Assuming that a standard deviation of 12 is appropriate in this case, and we want a power of 90%, we can plot the power curve:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(sse)\n## defining the range of n and theta to be evaluated\npsi <- powPar(\n  # SD values\n  theta = seq(from = 5, to = 20, by = 1),\n  # sample sizes\n  n = seq(from = 5, to = 50, by = 2),\n  # group means\n  muA = 0,\n  muB = 20)\n## define a function to return the power in each scenario\npowFun <- function(psi){\n  power.t.test(n = n(psi)/2,\n               delta = pp(psi, \"muA\") - pp(psi, \"muB\"),\n               sd = theta(psi)\n  )$power\n}\n## evaluate the power-function for all combinations of n and theta\ncalc <- powCalc(psi, powFun)\n\n## choose one particular example at theta of 1 and power of 0.9\npow <- powEx(calc, theta = 12, power = 0.9)\n## drawing the power plot with 3 contour lines\nplot(pow,\n     xlab = \"Standard Deviation\",\n     ylab = \"Total Sample Size\",\n     at = c(0.85, 0.9, 0.95))\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`sse` can be installed in R via the following methods:\n\n    # from CRAN (the stable version)\n    install.packages(\"sse\")\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"sse\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n## `sts_graph_landmark` - landmark analysis graphs\n\n![](https://img.shields.io/badge/Language-Stata-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg){fig-align=\"left\"}](https://github.com/CTU-Bern/sts_graph_landmark)\n\n`sts_graph_landmark` is a Stata program to create landmark analysis Kaplan-Meier curves, complete with risk table.\n\n<details>\n\n<summary>Example</summary>\n\nUsing `sts_graph_landmark` is consistent with the other `sts_*` programs in Stata. The dataset should be `stset` and then `sts_graph_landmark` can be called specifying the landmark time in `at`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# load example dataset (note: this example is nonsensical and only for graphing purposes)\nwebuse stan3, clear\n# set data as survival data\nstset t1, failure(died) id(id)\n# label treatment arms \nlabel define posttran_l 0 \"prior transplantation\" 1 \"after transplantation\"\nlabel value posttran posttran_l\n# create landmark plot and table \nsts_graph_landmark, at(200) by(posttran) risktable\n```\n:::\n\n\n\n\n![](docs/sts_landmark_graph.png)\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\nIt can be installed from github:\n\n    net install github, from(\"https://haghish.github.io/github/\")\n    github install CTU-Bern/sts_graph_landmark\n\n</details>\n\n## `secuTrialR` - import secuTrial datasets to R\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/SwissClinicalTrialOrganisation/secuTrialR) [![](https://img.shields.io/badge/Website-blue.svg)](https://swissclinicaltrialorganisation.github.io/secuTrialR/) [![](https://www.r-pkg.org/badges/version/secuTrialR?color=green)](https://cran.r-project.org/package=secuTrialR) [![](https://joss.theoj.org/papers/10.21105/joss.02816/status.svg)](https://doi.org/10.21105/joss.02816)\n\n<!-- because this is technically not a stats package, i put it last, rather than in alphabetical order -->\n\nsecuTrial datasets consist of a lot of files and it can be difficult to get to grips with them. `secuTrialR` tries to reduce the burden by providing a method to import and format (e.g. adding labels to variables) and explore data.\n\n<details>\n\n<summary>Example</summary>\n\nData can be read into R using `read_secuTrial`. The `visit_structure` function gives an idea of which forms are required at which visit. `plot_recruitment` is for plotting trial recruitment.\n\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(secuTrialR)\n# prepare path to example export\nexport_location <- system.file(\"extdata\", \"sT_exports\", \"snames\",\n                               \"s_export_CSV-xls_CTU05_short_miss_en_utf8.zip\",\n                               package = \"secuTrialR\")\n# read all export data\nsT_export <- read_secuTrial(data_dir = export_location)\nplot(visit_structure(sT_export))\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nplot_recruitment(sT_export)\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\n\n\n</details>\n\n`secuTrialR` was developed by the data management platform with substantial input from members of the statistics and methodology platform.\n\n<details>\n\n<summary>Installation</summary>\n\n`secuTrialR` can be installed in R via the following methods:\n\n    # from CRAN (the stable version)\n    install.packages(\"secuTrialR\")\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"secuTrialR\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n<!-- eventually... -->\n\n<!-- ## `shiny_template` - a template shiny app for use in clinical trials and registries -->\n\n<!-- Rather than a fully blown R package, it provides a template that can be adapted to be used with trial databases. -->\n\n<!-- `shiny_template` was developed by the data management platform with substantial input from members of the statistics and methodology platform. -->\n\n# Other software developed by CTUs\n\nCTU's sometimes also develop software without explicit funding from the SCTO platform. Those packages are listed below.\n\n## `accrualPlot` - simple creation of accrual plots\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/accrualPlot) [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/accrualPlot/) [![](https://www.r-pkg.org/badges/version/accrualPlot?color=green)](https://cran.r-project.org/package=accrualPlot)\n\n`accrualPlot` is an R package for summarizing trial recruitment data. With relatively little code, it is possible to create various plots and tables useful for recruitment reports, as well as predict the end of recruitment based on the recruitment to date.\n\n<details>\n\n<summary>Example</summary>\n\n`accrualPlot` includes a simulated dataset of participants recruited into a trial in one of three sites. The `accrual_create_df` function is used to define the properties of the sites (e.g. start dates if that differs from the first participants recruitment date). The plot and summary functions can then be used to plot or tabulate the data. The data can be plot using either base graphics or `ggplot2`.\n\n\n\n\n::: {.cell layout-nrow=\"2\" layout-ncol=\"2\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(accrualPlot)\ndata(accrualdemo)\ndf <- accrual_create_df(accrualdemo$date, by = accrualdemo$site)\n# cumulative recruitment\nplot(df, which = \"cum\", engine = \"ggplot2\")\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# absolute recruitment (daily/weekly/monthly)\nplot(df, which = \"abs\", engine = \"ggplot2\")\n```\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# predict end date\nplot(df, which = \"pred\", target = 300, engine = \"ggplot2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in geom_point(aes(x = edate, y = targetm), col = col.pred, pch = pch.pred): All aesthetics have length 1, but the data has 79 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](software_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# summary table\nlibrary(gt)\ngt(summary(df)) %>% \n  tab_options(column_labels.hidden = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"qxqazmbsou\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#qxqazmbsou table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#qxqazmbsou thead, #qxqazmbsou tbody, #qxqazmbsou tfoot, #qxqazmbsou tr, #qxqazmbsou td, #qxqazmbsou th {\n  border-style: none;\n}\n\n#qxqazmbsou p {\n  margin: 0;\n  padding: 0;\n}\n\n#qxqazmbsou .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#qxqazmbsou .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#qxqazmbsou .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#qxqazmbsou .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#qxqazmbsou .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#qxqazmbsou .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#qxqazmbsou .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#qxqazmbsou .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#qxqazmbsou .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#qxqazmbsou .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#qxqazmbsou .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#qxqazmbsou .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#qxqazmbsou .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#qxqazmbsou .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#qxqazmbsou .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qxqazmbsou .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#qxqazmbsou .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#qxqazmbsou .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#qxqazmbsou .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qxqazmbsou .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#qxqazmbsou .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qxqazmbsou .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#qxqazmbsou .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qxqazmbsou .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#qxqazmbsou .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#qxqazmbsou .gt_left {\n  text-align: left;\n}\n\n#qxqazmbsou .gt_center {\n  text-align: center;\n}\n\n#qxqazmbsou .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#qxqazmbsou .gt_font_normal {\n  font-weight: normal;\n}\n\n#qxqazmbsou .gt_font_bold {\n  font-weight: bold;\n}\n\n#qxqazmbsou .gt_font_italic {\n  font-style: italic;\n}\n\n#qxqazmbsou .gt_super {\n  font-size: 65%;\n}\n\n#qxqazmbsou .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#qxqazmbsou .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#qxqazmbsou .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#qxqazmbsou .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#qxqazmbsou .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#qxqazmbsou .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#qxqazmbsou .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  \n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Center</td>\n<td headers=\"start_date\" class=\"gt_row gt_left\">First participant in</td>\n<td headers=\"time\" class=\"gt_row gt_left\">Months accruing</td>\n<td headers=\"n\" class=\"gt_row gt_left\">Participants accrued</td>\n<td headers=\"rate\" class=\"gt_row gt_left\">Accrual rate (per month)</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Site 1</td>\n<td headers=\"start_date\" class=\"gt_row gt_left\">09Jul2020</td>\n<td headers=\"time\" class=\"gt_row gt_left\">3</td>\n<td headers=\"n\" class=\"gt_row gt_left\">141</td>\n<td headers=\"rate\" class=\"gt_row gt_left\">45.98</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Site 2</td>\n<td headers=\"start_date\" class=\"gt_row gt_left\">20Jul2020</td>\n<td headers=\"time\" class=\"gt_row gt_left\">3</td>\n<td headers=\"n\" class=\"gt_row gt_left\">88</td>\n<td headers=\"rate\" class=\"gt_row gt_left\">32.59</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Site 3</td>\n<td headers=\"start_date\" class=\"gt_row gt_left\">04Sep2020</td>\n<td headers=\"time\" class=\"gt_row gt_left\">1</td>\n<td headers=\"n\" class=\"gt_row gt_left\">21</td>\n<td headers=\"rate\" class=\"gt_row gt_left\">18.00</td></tr>\n    <tr><td headers=\"name\" class=\"gt_row gt_left\">Overall</td>\n<td headers=\"start_date\" class=\"gt_row gt_left\">09Jul2020</td>\n<td headers=\"time\" class=\"gt_row gt_left\">3</td>\n<td headers=\"n\" class=\"gt_row gt_left\">250</td>\n<td headers=\"rate\" class=\"gt_row gt_left\">81.52</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`accrualPlot` can be installed in R via the following methods:\n\n    # from CRAN (the stable version)\n    install.packages(\"accrualPlot\")\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"accrualPlot\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n## `btable` - create baseline tables in Stata\n\n![](https://img.shields.io/badge/Language-Stata-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg){fig-align=\"left\"}](https://github.com/CTU-Bern/btable)\n\nCreating baseline tables is a repetitive task. Each paper needs one. `btable` provides a powerful approach to creating them. See the [making baseline tables article for an example](baselinetables.qmd#stata-btable). More information on `btable` can be found [here](https://github.com/CTU-Bern/btable){target=\"_blank\\\" rel\"}.\n\n<details>\n\n<summary>Installation</summary>\n\n`btable` can be installed in Stata via the following method:\n\n    net install github, from(\"https://haghish.github.io/github/\")\n    github install CTU-Bern/btable\n\n</details>\n\n## `btabler` - format tables for LaTeX reports\n\n![](https://img.shields.io/badge/Language-R-red.svg) [![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/btabler){target=\"_blank\\\" rel\"} [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/btabler/){target=\"_blank\"}\n\n`btabler` adds additional functionality to the `xtable` package such as merging column headers for use in tables for LaTeX. It was originally developed as an easy way to put tables generated by \\`btable\\` into LaTeX reports, hence the similarity in names.\n\n<details>\n\n<summary>Example</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(btabler)\ndf <- data.frame(name = c(\"\", \"\", \"Row 1\", \"Row2\"),\n                 out_t = c(\"Total\", \"mean (sd)\", \"t1\", \"t1\"),\n                 out_1 = c(\"Group 1\", \"mean (sd)\", \"g11\", \"g12\"),\n                 out_2 = c(\"Group 2\", \"mean (sd)\", \"g21\", \"g22\"))\nbtable(df, nhead = 2, nfoot = 0, caption = \"Table1\")\n```\n:::\n\n\n\n\nWhich will look like this in after LaTeX has created your PDF:\n\n![](docs/btabler_basic.png)\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`btabler` can be installed in R via the following method:\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"btabler\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n## `HSAr` - create reproducible hospital service areas in R\n\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/aghaynes/HSAr) [![](https://img.shields.io/badge/Health%20Serv%20Res-10.1111/1475--6773.13275-apple.svg)](https://doi.org/10.1111/1475-6773.13275) [![](https://img.shields.io/badge/PubMed-PMC7240760-apple.svg)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7240760/)\n\nHospital service areas can be useful for hospital planning, but their main use is in small area research. They are traditionally made largely by hand, by assigning each location to the hospital where most residents go and then iteratively moving locations until two main criteria are fulfilled - a HSA should not have detached islands, and at least 50% of it's hospitalizations should stay there. The iterative steps are largely manual subjective work. As such the reproducibility of HSA creation is poor.\n\n`HSAr` provides an automated algorithm for creating HSAs by starting at the hospital and building the HSA around it until all regions in the provided shapefile are assigned to a HSA.\n\n`HSAr` was developed as part of national research programme 74, smarter health care.\n\n<details>\n\n<summary>Example</summary>\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`HSAr` can be installed in R via the following method:\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"HSAr\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n## `kpitools` - tools to assist with risk based management KPIs\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/kpitools) [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/kpitools/)\n\nIt is not enough to simply run a trial. ICH GCP E5 also requires risk based monitoring to be performed. `kpitools` provides a set of summary functions and a standardized format for presenting the key performance indicators (KPIs) that are typically defined for risk based monitoring strategies.\n\n<details>\n\n<summary>Example</summary>\n\n\n\nIt could be that we believe that time of day might be an indicator of data fabrication because it's not possible that participants are randomised at certain times of the day. The `fab_tod` function can help depict that..\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kpitools)\n\nset.seed(12345)\ndat <- data.frame(\n  x = lubridate::ymd_h(\"2020-05-01 13\") + 60^2*rnorm(40, 0, 3),\n  mean = rnorm(40, 56, 20),\n  by = sample(1:4, 40, prob = c(.2,.25,.4,.4), replace = TRUE)\n)\ndat %>% kpi(\"mean\", kpi_fn_mean, by = \"by\") %>% plot\ndat %>% fab_tod(\"x\")\n```\n:::\n\n\n\n\n\n</details>\n\n<details>\n\n<summary>Installation</summary>\n\n`kpitools` can be installed in R via the following method:\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"kpitools\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n\n\n\n## `stata_secutrial` - some Stata code to do data import and preparation of secuTrial datasets\n![](https://img.shields.io/badge/Language-Stata-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg){fig-align=\"left\"}](https://github.com/CTU-Bern/stata_secutrial)\n\nSimilar to `secuTrialR` above, `stata_secutrial` provides Stata code to read and prepare secuTrial exports in Stata. It labels variables, formats date variables, adds labels to categorical variables etc, saving each form as a `dta` file for your further use.\n\n<details>\n<summary>Example</summary>\n\nAssuming certain folders and globals have been prepared in advance (see [GitHub](https://github.com/CTU-Bern/stata_secutrial) for further information), using `stata_secutrial` may be as simple as entering\n\n    do SecuTrial_zip_data_import\n\ninto Stata and then navigating to your download when prompted.\n\n</details>\n\n<details>\n<summary>Installation</summary>\n\nAs `stata_secutrial` is just code rather than a package, you can copy the files from GitHub and use then in you project. Towards the top of the [GitHub page](https://github.com/CTU-Bern/stata_secutrial) is a green `code` button. Click that and choose download ZIP. You can then unzip the files to your working directory.\n\n</details>\n\n## `SwissASR` - simplified annual safety reports with R\n![](https://img.shields.io/badge/Language-R-red.svg)\n[![](https://img.shields.io/badge/GitHub-silver.svg)](https://github.com/CTU-Bern/SwissASR) [![](https://img.shields.io/badge/Website-blue.svg)](https://ctu-bern.github.io/SwissASR/)\n\nEthics and regulators often require annual safety reports. `SwissASR` provides a relatively easy way to produce annual safety reports according to the current template available on the SwissMedic(?) website. The function returns a word file with the safety data completed based on the data provided to it. Minimal additional details should then be added by the study team or principal investigator.\n\n<details>\n<summary>Example</summary>\n\n</details>\n\n<details>\n<summary>Installation</summary>\n\n`SwissASR` can be installed in R via the following method:\n\n    # from CTU Bern's package universe (the development version)\n    install.packages(\"SwissASR\", repos = \"https://ctu-bern.r-universe.dev/\")\n\n</details>\n",
    "supporting": [
      "software_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}